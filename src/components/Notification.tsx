"use client";

import { useEffect, useState } from "react";

// H√†m t·∫°o ID ng·∫´u nhi√™n
const generateRandomID = () => {
  const prefix = Math.floor(Math.random() * 900) + 100; // 3 ch·ªØ s·ªë ƒë·∫ßu (100-999)
  return `${prefix}****`;
};

// H√†m t·∫°o s·ªë ti·ªÅn ng·∫´u nhi√™n
const generateRandomAmount = () => {
  const prefix = Math.floor(Math.random() * 900) + 100; // 3 ch·ªØ s·ªë ƒë·∫ßu (100-999)
  return `${prefix}***`;
};

// Th√¥ng b√°o lo·∫°i 1 - Random m·ªói l·∫ßn hi·ªÉn th·ªã
const getRandomNotification = () => {
  return {
    type: "random",
    line1: `Ch√∫c m·ª´ng ID ${generateRandomID()} ƒë√£ l√† m·ªôt trong nh·ªØng ng∆∞·ªùi may m·∫Øn`,
    line2: `ƒë∆∞·ª£c quay s·ªë b·ªëc thƒÉm nh·∫≠n ti·ªÅn th∆∞·ªüng ${generateRandomAmount()} VND`
  };
};

// Th√¥ng b√°o c·ªë ƒë·ªãnh
const notifications = [
  {
    type: "domain",
    line1: "üëâüëâ Qu√Ω kh√°ch vui l√≤ng truy c·∫≠p tr·ª±c ti·∫øp",
    line2: "t√™n mi·ªÅn d·ªÖ nh·ªõ: 92lt.bet"
  },
  {
    type: "warning",
    parts: [
      "üÜòüÜòüÜò C·∫¢NH B√ÅO: Qu√Ω kh√°ch h√†ng l∆∞u √Ω g·∫ßn ƒë√¢y c√≥ m·ªôt s·ªë c√° nh√¢n ƒë√£ c·ªë √Ω t·∫°o s·ªë t√†i kho·∫£n ng√¢n h√†ng gi·ªëng v·ªõi c√°c t√†i kho·∫£n th·ª• h∆∞·ªüng",
      "c·ªßa c√°c c·ªïng n·∫°p 92LOTTERY, qu√Ω kh√°ch h√†ng khi n·∫°p ti·ªÅn l∆∞u √Ω ki·ªÉm tra k·ªπ s·ªë t√†i kho·∫£n",
      "t√™n ng√¢n h√†ng v√† t√™n ng∆∞·ªùi th·ª• h∆∞·ªüng tr∆∞·ªõc khi ti·∫øn h√†nh thanh to√°n ƒë·ªÉ tr√°nh th·∫•t tho√°t. Xin c·∫£m ∆°n! üíØüíØ"
    ],
    currentPart: 0
  }
];

export default function Notification() {
  // Th√™m state ƒë·ªÉ l∆∞u th√¥ng b√°o hi·ªán t·∫°i v√† th√¥ng b√°o ti·∫øp theo
  const [currentNotification, setCurrentNotification] = useState(getRandomNotification());
  const [nextNotification, setNextNotification] = useState(notifications[0]);
  const [isAnimating, setIsAnimating] = useState(false);
  const [notificationIndex, setNotificationIndex] = useState(0);
  const [warningPartIndex, setWarningPartIndex] = useState(0);

  // H√†m ƒë·ªÉ l·∫•y n·ªôi dung hi·ªÉn th·ªã c·ªßa th√¥ng b√°o hi·ªán t·∫°i
  const getCurrentContent = () => {
    if (currentNotification.type === "warning" && currentNotification.parts) {
      return currentNotification.parts[warningPartIndex];
    } else if (currentNotification.line1 && currentNotification.line2) {
      return `${currentNotification.line1} ${currentNotification.line2}`;
    }
    return "";
  };

  // H√†m ƒë·ªÉ l·∫•y n·ªôi dung hi·ªÉn th·ªã c·ªßa th√¥ng b√°o ti·∫øp theo
  const getNextContent = () => {
    if (nextNotification.type === "warning" && nextNotification.parts) {
      // N·∫øu ƒëang chuy·ªÉn t·ª´ th√¥ng b√°o kh√°c sang warning, hi·ªÉn th·ªã ph·∫ßn ƒë·∫ßu ti√™n
      return nextNotification.parts[0];
    } else if (nextNotification.line1 && nextNotification.line2) {
      return `${nextNotification.line1} ${nextNotification.line2}`;
    }
    return "";
  };

  useEffect(() => {
    const interval = setInterval(() => {
      setIsAnimating(true);

      // Sau khi animation k·∫øt th√∫c, ƒë·ªïi n·ªôi dung v√† reset animation
      setTimeout(() => {
        // Ki·ªÉm tra xem th√¥ng b√°o hi·ªán t·∫°i c√≥ ph·∫£i l√† warning v√† c√≤n ph·∫ßn ti·∫øp theo kh√¥ng
        if (currentNotification.type === "warning" && currentNotification.parts &&
            warningPartIndex < currentNotification.parts.length - 1) {
          // N·∫øu c√≤n ph·∫ßn ti·∫øp theo, tƒÉng warningPartIndex
          setWarningPartIndex(warningPartIndex + 1);
        } else {
          // N·∫øu kh√¥ng c√≤n ph·∫ßn ti·∫øp theo ho·∫∑c kh√¥ng ph·∫£i warning, chuy·ªÉn sang th√¥ng b√°o ti·∫øp theo
          setCurrentNotification(nextNotification);
          setWarningPartIndex(0); // Reset warningPartIndex

          // T√≠nh to√°n th√¥ng b√°o ti·∫øp theo
          const nextIndex = (notificationIndex + 1) % (notifications.length + 1);
          setNotificationIndex(nextIndex);

          // N·∫øu nextIndex = 0, hi·ªÉn th·ªã th√¥ng b√°o ng·∫´u nhi√™n, ng∆∞·ª£c l·∫°i hi·ªÉn th·ªã th√¥ng b√°o c·ªë ƒë·ªãnh
          if (nextIndex === 0) {
            setNextNotification(getRandomNotification());
          } else {
            setNextNotification(notifications[nextIndex - 1]);
          }
        }

        setIsAnimating(false);
      }, 700); // Th·ªùi gian animation - kh·ªõp v·ªõi duration-700

    }, 7000); // ƒê·ªïi th√¥ng b√°o m·ªói 7 gi√¢y ƒë·ªÉ ng∆∞·ªùi d√πng c√≥ th·ªùi gian ƒë·ªçc

    return () => clearInterval(interval);
  }, [notificationIndex, warningPartIndex, currentNotification, nextNotification]);

  return (
    <div className="flex items-center px-3 py-2 text-xs font-semibold bg-white border-b border-[#eee] overflow-hidden h-[36px]">
      <div className="flex-none mr-2 text-[#e62e2e] self-start mt-1">
        <svg xmlns="http://www.w3.org/2000/svg" width="16" height="16" viewBox="0 0 24 24" fill="none" stroke="currentColor" strokeWidth="2" strokeLinecap="round" strokeLinejoin="round">
          <path d="M18 8A6 6 0 0 0 6 8c0 7-3 9-3 9h18s-3-2-3-9"></path>
          <path d="M13.73 21a2 2 0 0 1-3.46 0"></path>
        </svg>
      </div>
      <div className="flex-1 overflow-hidden relative h-6">
        <div
          className={`absolute w-full flex flex-col ${
            isAnimating ? 'animate-[smoothSlideUp_700ms_ease-in-out_forwards]' : ''
          }`}
          style={{
            transform: isAnimating ? 'translateY(0)' : 'translateY(0)',
            opacity: isAnimating ? 1 : 1
          }}
        >
          <div className="text-center text-[11px] text-amber-500 font-bold whitespace-normal leading-tight px-2">{getCurrentContent()}</div>
        </div>
        <div
          className={`absolute w-full flex flex-col ${
            !isAnimating ? 'hidden' : ''
          }`}
          style={{
            transform: 'translateY(100%)',
            opacity: 0
          }}
        >
          <div className="text-center text-[11px] text-amber-500 font-bold whitespace-normal leading-tight px-2">{getNextContent()}</div>
        </div>
      </div>
      <button className="ml-2 bg-[#e62e2e] text-white rounded px-2 py-0.5 text-xs whitespace-nowrap self-start mt-1">
        Chi ti·∫øt
      </button>
    </div>
  );
}
